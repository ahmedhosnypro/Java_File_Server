type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.net.ConnectException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class FileServerTest extends StageTest<String> {

        private static final String onConnectExceptionMessage = "A client can't connect to the server!\n" +
            "Make sure the server handles connections and doesn't stop after one client connected.";

        public static final String serverDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

        public static final String clientDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "client" + File.separator + "data" + File.separator;

        private static String id;

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkServerStop),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkPaths),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testSaveAndGet),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testGetAfterServerRestart),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testDeleteFiles)
            );
        }

        // Test #1. Check if server stops
        CheckResult checkServerStop() {

            TestedProgram server = getServer();
            TestedProgram client;

            server.startInBackground();

            client = getClient();
            client.start();
            client.execute("exit");

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                return CheckResult.wrong("You should stop the server if a client sends 'exit'");
            }

            return CheckResult.correct();
        }

        CheckResult checkPaths() {
            // Test #2. Check folders with data
            if (!Files.exists(Paths.get(serverDataPath)) || !Files.isDirectory(Paths.get(serverDataPath))) {
                return CheckResult.wrong("Can't find '/server/data' folder. You should store all saved files in it!\n" +
                    "The folder should be created even if the server wasn't started!");
            }

            if (!Files.exists(Paths.get(clientDataPath)) || !Files.isDirectory(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find '/client/data' folder. You should store all files you want to " +
                    "store on the server in it!\n" +
                    "The folder should be created even if the client wasn't started!");
            }
            return CheckResult.correct();
        }


        CheckResult testSaveAndGet() {

            TestedProgram server;
            TestedProgram client;

            Utils.createFiles(clientDataPath);

            // Test #3. Check saving file on the server
            server = getServer();
            server.startInBackground();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeAdding = Utils.numExistingFiles(folder);

            client = getClient();
            client.start();
            client.execute("2\ntest_purpose_test1.txt");
            String clientOutput = client.execute("");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            id = Utils.findId(clientOutput);

            int numOfFilesAfterAdding = Utils.numExistingFiles(folder);

            if (numOfFilesAfterAdding == numOfFilesBeforeAdding) {
                return CheckResult.wrong("Once a client saved a file on the server number of files in /server/data/ should be changed!");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("2\ntest_purpose_test2.txt\ntest_purpose_newFile.txt");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            if (!Utils.isServerFileExists("test_purpose_newFile.txt")) {
                return CheckResult.wrong("Can't find a file after saving on the server." +
                    "You should save client's files in /server/data/ folder!");
            }

            String savedFileContent = Utils.getServerFileContent("test_purpose_newFile.txt");

            if (!savedFileContent.equals("test2")) {
                return CheckResult.wrong("A file after saving has wrong content!");
            }

            // Test #4. Check getting files
            client = getClient();
            client.start();
            clientOutput = client.execute("1\n1\ntest_purpose_notExist.txt");

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by name that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("1\n2\n" + (id + "511"));

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by ID that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get.txt");

            if (!Utils.isClientFileExists("test_purpose_get.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByNameFileContent = Utils.getClientFileContent("test_purpose_get.txt");
            if (!downloadedByNameFileContent.equals("test2")) {
                return CheckResult.wrong("After getting a file from the server by name it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_id.txt");

            if (!Utils.isClientFileExists("test_purpose_get_id.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByIdFileContent = Utils.getClientFileContent("test_purpose_get_id.txt");
            if (!downloadedByIdFileContent.equals("test1")) {
                return CheckResult.wrong("After getting a file from the server by ID it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testGetAfterServerRestart() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            server.startInBackground();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_by_id_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_by_id_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testDeleteFiles() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeDeleting = Utils.numExistingFiles(folder);

            server.startInBackground();
            client.start();
            client.execute("3\n1\ntest_purpose_newFile.txt");

            sleep(2000);
            int numOfFilesAfterDeletingByName = Utils.numExistingFiles(folder);
            if (numOfFilesBeforeDeleting == numOfFilesAfterDeletingByName) {
                return CheckResult.wrong("Once a client deleted a file by name from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("3\n2\n" + id);

            sleep(2000);
            int numOfFilesAfterDeletingById = Utils.numExistingFiles(folder);
            if (numOfFilesAfterDeletingByName == numOfFilesAfterDeletingById) {
                return CheckResult.wrong("Once a client deleted a file by ID from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTestDeleteFiles() {
            Utils.deleteTestFiles();
        }

        public static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        public static TestedProgram getServer() {
            return new TestedProgram("server");
        }
    }


  learner_created: false
- name: src/client/CLI.java
  visible: true
  text: |
    package client;

    import client.http.IHttpClient;

    import java.util.Scanner;

    public class CLI {
        private CLI() {
        }

        private static final Scanner scanner = new Scanner(System.in);

        static void run() {
            System.out.print("Enter action (1 - get a file, 2 - create a file, 3 - delete a file): ");
            String action = scanner.nextLine();
            if (!isValidAction(action)) {
                return;
            }
            if (action.equals("exit")) {
                IHttpClient.sendRequest("EXIT");
                return;
            }

            System.out.print("Enter file name: ");
            String fileName = scanner.nextLine();

            switch (action) {
                case "1" -> IHttpClient.sendRequest("GET", fileName);
                case "2" -> {
                    System.out.print("Enter file content: ");
                    String fileContent = scanner.nextLine();

                    IHttpClient.sendRequest("PUT", fileName, fileContent);
                }
                case "3" -> IHttpClient.sendRequest("DELETE", fileName);
                default -> throw new IllegalArgumentException("Unknown action");
            }
        }


        private static boolean isValidAction(String action) {
            return action.equals("1") || action.equals("2") || action.equals("3") || action.equals("exit");
        }
    }
  learner_created: true
- name: src/client/http/IHttpClient.java
  visible: true
  text: |
    package client.http;

    import server.ServerConfig;

    import java.io.IOException;
    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;

    public class IHttpClient {
        private IHttpClient() {
        }

        private static final String PROTOCOL = "http://";

        public static void sendRequest(String... args) {
            HttpClient httpClient = HttpClient.newHttpClient();

            URI uri = URI.create(PROTOCOL +
                    ServerConfig.getHostName() + ":" +
                    ServerConfig.getPort() +
                    (args.length > 1 ? "?/fileName=" + args[1] : ""));

            HttpRequest request = createHttpRequest(uri, args);

            try {
                HttpResponse<String> response = httpClient.send(
                        request, HttpResponse.BodyHandlers.ofString());

                System.out.println("The response says that " + response.body());
            } catch (IOException | InterruptedException e) {
                //ignore
            }
        }

        private static HttpRequest createHttpRequest(URI uri, String... args) {
            var requestBuilder = HttpRequest.newBuilder()
                    .uri(uri);
            return switch (args[0]) {
                case "GET" -> requestBuilder.GET()
                        .build();
                case "DELETE" -> requestBuilder.DELETE()
                        .build();
                case "PUT" -> requestBuilder.PUT(HttpRequest.BodyPublishers.ofString(args[2]))
                        .header("Content-Type", "plain/text")
                        .build();
                case "EXIT" -> requestBuilder
                        .method("EXIT", HttpRequest.BodyPublishers.noBody())
                        .build();
                default -> throw new IllegalArgumentException("Unknown command");
            };
        }
    }
  learner_created: true
- name: src/server/http/IHttpServer.java
  visible: true
  text: |+
    package server.http;

    import com.sun.net.httpserver.HttpServer;
    import server.ServerConfig;

    import java.io.IOException;
    import java.net.InetSocketAddress;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;

    public class IHttpServer {
        private IHttpServer() {
        }

        private static final ExecutorService EXECUTOR = Executors.newCachedThreadPool();
        private static HttpServer server;

        public static void startHttpServer() {
            try {
                server = HttpServer.create(new InetSocketAddress(ServerConfig.getHostName(), ServerConfig.getPort()), 50);
                server.setExecutor(EXECUTOR);
                server.createContext("/", new IHttpHandler());
                server.start();
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        }

        public static void stopHttpServer() {
            EXECUTOR.shutdown();
            server.stop(0);
        }
    }


  learner_created: true
- name: src/server/http/IHttpHandler.java
  visible: true
  text: |-
    package server.http;

    import com.sun.net.httpserver.HttpExchange;
    import com.sun.net.httpserver.HttpHandler;

    public class IHttpHandler implements HttpHandler {

        @Override
        public void handle(HttpExchange httpExchange) {
            RequestHandler requestHandler = RequestHandlerBuilder.create(httpExchange);
            requestHandler.handleRequest(httpExchange);
        }
    }
  learner_created: true
- name: test/Utils.java
  visible: false
  text: |+
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Utils {
        public static String findId(String output) {
            Pattern pattern = Pattern.compile("ID = (\\d+)");
            Matcher matcher = pattern.matcher(output);

            if (matcher.find()) {
                int count = matcher.groupCount();
                if (count != 1) {
                    throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
                }
                return matcher.group(1);
            } else {
                throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
            }
        }

        public static void deleteTestFiles() {
            File dir = new File(FileServerTest.serverDataPath);

            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe they are not closed!");
                        }
                    }
                }
            }

            File cdir = new File(FileServerTest.clientDataPath);
            files = cdir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe their input streams are not closed!");
                        }
                    }
                }
            }
        }

        public static void createFiles(String clientDataPath) {

            for (int i = 0; i < 2; i++) {
                try {
                    File file = new File(clientDataPath + String.format("test_purpose_test%d.txt", i + 1));
                    if (!file.exists()) file.createNewFile();
                    FileWriter writer = new FileWriter(file, false);
                    writer.write(String.format("test%d", i + 1));
                    writer.close();
                } catch (IOException e) {
                    throw new RuntimeException("Can't create test files!");
                }

            }
        }

        public static int numExistingFiles(File file) {
            File[] files = file.listFiles();
            if (files == null) {
                return 0;
            }
            return (int) Arrays.stream(files).filter(File::exists).count();
        }

        private static boolean isFileExists(String path) {
            return Files.exists(Paths.get(path)) && !Files.isDirectory(Paths.get(path));
        }

        public static boolean isClientFileExists(String fileName) {
            return isFileExists(FileServerTest.clientDataPath + fileName);
        }

        public static boolean isServerFileExists(String fileName) {
            return isFileExists(FileServerTest.serverDataPath + fileName);
        }

        public static String getServerFileContent(String fileName) {
            return getFileContent(FileServerTest.serverDataPath + fileName);
        }

        public static String getClientFileContent(String fileName) {
            return getFileContent(FileServerTest.clientDataPath + fileName);
        }

        private static String getFileContent(String fileName) {
            try {
                return new String(Files.readAllBytes(Paths.get(fileName))).trim();
            } catch (IOException e) {
            }
            throw new WrongAnswer("Can't read files content.\n" +
                "Make sure you close input/output streams after reading or writing files!");
        }

    }


  learner_created: false
- name: src/client/file/ClientFileManager.java
  visible: true
  learner_created: true
- name: src/client/cli/Controller.java
  visible: true
  learner_created: true
- name: src/client/cli/Command.java
  visible: true
  learner_created: true
- name: src/client/cli/PutCommand.java
  visible: true
  learner_created: true
- name: src/client/cli/GetCommand.java
  visible: true
  learner_created: true
- name: src/client/cli/DeleteCommand.java
  visible: true
  learner_created: true
- name: src/server/http/request/DeleteRequestHandler.java
  visible: true
  text: |
    package server.http;

    import com.sun.net.httpserver.HttpExchange;

    public class DeleteRequestHandler extends RequestHandler {
        @Override
        public void handleRequest(HttpExchange httpExchange) {
            super.handleRequest(httpExchange);
        }
    }
  learner_created: true
- name: src/server/http/request/ExitRequestHandler.java
  visible: true
  text: |
    package server.http;

    import com.sun.net.httpserver.HttpExchange;

    public class ExitRequestHandler extends RequestHandler {
        @Override
        public void handleRequest(HttpExchange httpExchange) {
            IHttpServer.stopHttpServer();
        }
    }
  learner_created: true
- name: src/server/http/request/GetRequestHandler.java
  visible: true
  text: |
    package server.http;

    import com.sun.net.httpserver.HttpExchange;


    public class GetRequestHandler extends RequestHandler {
        @Override
        public void handleRequest(HttpExchange httpExchange) {
            super.handleRequest(httpExchange);
        }
    }
  learner_created: true
- name: src/server/http/request/PutRequestHandler.java
  visible: true
  text: |
    package server.http;

    import com.sun.net.httpserver.HttpExchange;

    import java.io.IOException;

    public class PutRequestHandler extends RequestHandler {
        @Override
        public void handleRequest(HttpExchange httpExchange) {
            String fileName = httpExchange.
                    getRequestURI()
                    .toString()
                    .split("\\?")[1]
                    .split("=")[1];

            try {
                String fileContent = new String(httpExchange.getRequestBody().readAllBytes());
                ResponseHandler.handleResponse(httpExchange,
                        fileCommand.executeCommand(fileName, fileContent),
                        200);
            } catch (IOException e) {
                ResponseHandler.handleResponse(httpExchange, "creating the file was forbidden!", 403);
            }
        }
    }
  learner_created: true
- name: src/server/http/request/RequestHandler.java
  visible: true
  text: |
    package server.http;

    import com.sun.net.httpserver.HttpExchange;
    import server.file.commander.FileCommandController;

    import java.nio.file.InvalidPathException;
    import java.nio.file.Paths;

    public abstract class RequestHandler {
        FileCommandController fileCommand = new FileCommandController();

        void handleRequest(HttpExchange httpExchange) {
            String fileName = httpExchange.
                    getRequestURI()
                    .toString()
                    .split("\\?")[1]
                    .split("=")[1];

            ResponseHandler.handleResponse(httpExchange,
                    fileCommand.executeCommand(fileName),
                    200);
        }

        public void setFileCommand(String fileCommandType) {
            this.fileCommand.setCommand(fileCommandType);
        }
    }
  learner_created: true
- name: src/server/http/request/RequestHandlerBuilder.java
  visible: true
  text: |
    package server.http;

    import com.sun.net.httpserver.HttpExchange;

    public class RequestHandlerBuilder {
        private RequestHandlerBuilder() {
        }

        public static RequestHandler create(HttpExchange httpExchange) {
            String requestMethod = httpExchange.getRequestMethod();
            RequestHandler requestHandler = switch (requestMethod) {
                case "GET" -> new GetRequestHandler();
                case "PUT" -> new PutRequestHandler();
                case "DELETE" -> new DeleteRequestHandler();
                case "EXIT" -> new ExitRequestHandler();
                default -> throw new IllegalArgumentException("Can't handle " + requestMethod + " request method");
            };
            requestHandler.setFileCommand(requestMethod);
            return requestHandler;
        }
    }
  learner_created: true
- name: src/server/http/request/ResponseHandler.java
  visible: true
  text: |
    package server.http;

    import com.sun.net.httpserver.HttpExchange;

    import java.io.IOException;
    import java.io.OutputStream;

    public class ResponseHandler {
        private ResponseHandler() {
        }

        public static void handleResponse(HttpExchange httpExchange, String response, int responseCode) {
            OutputStream outputStream = httpExchange.getResponseBody();
            try {
                httpExchange.sendResponseHeaders(responseCode, response.length());
                outputStream.write(response.getBytes());
                outputStream.flush();
                outputStream.close();
            } catch (IOException e) {
                System.out.println("Error while sending response");
            }
        }
    }
  learner_created: true
- name: src/file/FileManager.java
  visible: true
  text: |
    package server.file;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;

    public class FileManager {
        private static FileManager instance = new FileManager();
        private static final String NOT_FOUND = "the file was not found!";

        private FileManager() {
            Path dataRootPath = Path.of(
                    System.getProperty("user.dir"),
                    "src", "server", "data"
            );
            if (!isExist("")) {
                try {
                    Files.createDirectories(dataRootPath);
                } catch (IOException e) {
                    e.printStackTrace();
                    System.exit(1);
                }
            }
        }

        public static Path getFilePath(String fileName) {
            return Path.of(
                    System.getProperty("user.dir"),
                    "src", "server", "data", fileName
            );
        }

        public static FileManager getInstance() {
            if (instance == null) {
                instance = new FileManager();
            }
            return instance;
        }

        private static boolean isWrongFileName(String fileName) {
            try {
                Paths.get(fileName);
                return false;
            } catch (Exception e) {
                return true;
            }
        }

        public static boolean isExist(String fileName) {
            if (isWrongFileName(fileName)) {
                return false;
            }
            File file = new File(getFilePath(fileName).toString());
            return file.exists();
        }

        public boolean deleteFile(String fileName) {
            if (isWrongFileName(getFilePath(fileName).toString())) {
                return false;
            }
            File file = new File(getFilePath(fileName).toString());
            if (file.exists()) {
                try {
                    Files.delete(file.toPath());
                    return true;
                } catch (Exception x) {
                    return false;
                }
            }
            return false;
        }

        public boolean createFile(String fileName) {
            if (isWrongFileName(fileName)) {
                return false;
            }
            File file = new File(getFilePath(fileName).toString());
            if (!file.exists()) {
                try {
                    if (file.createNewFile()) {
                        return true;
                    }
                } catch (Exception e) {
                    System.out.println("Could not create file " + fileName);
                }
            }
            return false;
        }

        public String getFileContent(String fileName) {
            if (isWrongFileName(fileName)) {
                return NOT_FOUND;
            }
            File file = new File(getFilePath(fileName).toString());
            if (file.exists()) {
                try {
                    return new String(Files.readAllBytes(file.toPath()));
                } catch (Exception e) {
                    //ignore
                }
            }
            return NOT_FOUND;
        }

        public void init() {
            getInstance();
        }
    }
  learner_created: true
- name: src/server/file/commander/DeleteCommand.java
  visible: true
  text: |
    package server.file.commander;

    import server.file.FileManager;

    public class DeleteCommand implements Command {
        public String execute(String... args) {
            String fileName = args[0];
            if (FileManager.getInstance().deleteFile(fileName)) {
                return "the file was successfully deleted!";
            } else {
                return "the file was not found!";
            }
        }
    }
  learner_created: true
- name: src/server/file/commander/PutCommand.java
  visible: true
  text: |
    package server.file.commander;

    import server.file.FileManager;

    import java.io.FileWriter;
    import java.io.IOException;

    public class PutCommand implements Command {
        public String execute(String... args) {
            String fileName = args[0];
            if (FileManager.getInstance().createFile(fileName)) {
                try (FileWriter writer = new FileWriter(FileManager.getFilePath(fileName).toString())) {
                    writer.write(args[1]);
                    return "the file was created!";
                } catch (IOException e) {
                    //ignored
                }
            }
            return "creating the file was forbidden!";
        }
    }
  learner_created: true
- name: src/server/file/commander/GetCommand.java
  visible: true
  text: |
    package server.file.commander;

    import server.file.FileManager;

    public class GetCommand implements Command {
        @Override
        public String execute(String... args) {
            String fileName = args[0];
            if (FileManager.isExist(fileName)) {
                return "The content of the file is: " + FileManager.getInstance().getFileContent(fileName);
            } else {
                return "the file was not found!";
            }
        }
    }
  learner_created: true
- name: src/server/file/commander/Command.java
  visible: true
  text: |
    package server.file.commander;

    public interface Command {

        String execute(String... args);
    }
  learner_created: true
- name: src/server/file/commander/FileCommandController.java
  visible: true
  text: |
    package server.file.commander;

    public class FileCommandController {
        private Command command;

        public void setCommand(String type) {
            command = switch (type) {
                case "PUT" -> new PutCommand();
                case "GET" -> new GetCommand();
                case "DELETE" -> new DeleteCommand();
                case "EXIT" -> new ExitCommand();
                default -> throw new IllegalArgumentException("Unknown command");
            };
        }

        public String executeCommand(String... args) {
            return command.execute(args);
        }
    }
  learner_created: true
- name: src/server/file/commander/ExitCommand.java
  visible: true
  text: |
    package server.file.commander;

    public class ExitCommand implements Command {

        @Override
        public String execute(String... args) {
            return "";
        }
    }
  learner_created: true
- name: src/server/file/FileIdsData.java
  visible: true
  learner_created: true
- name: src/server/file/ServerFileManager.java
  visible: true
  learner_created: true
- name: src/resources/files_id.json
  visible: true
  learner_created: true
- name: src/client/data/test_purpose_test2.txt
  visible: true
  learner_created: true
- name: src/client/data/test_purpose_test1.txt
  visible: true
  learner_created: true
- name: src/client/data/test_purpose_get.txt
  visible: true
  learner_created: true
- name: src/client/data/test_purpose_get_id.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5428#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 13 Jul 2022 00:23:03 UTC
record: -1
